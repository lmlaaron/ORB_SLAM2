// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mono_kitti.proto

#ifndef PROTOBUF_mono_5fkitti_2eproto__INCLUDED
#define PROTOBUF_mono_5fkitti_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mono_kitti {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mono_5fkitti_2eproto();
void protobuf_AssignDesc_mono_5fkitti_2eproto();
void protobuf_ShutdownFile_mono_5fkitti_2eproto();

class NewSLAMRequest;
class NewSLAMReturn;
class SaveKeyFrameTrajectoryTUMRequest;
class SaveKeyFrameTrajectoryTUMReturn;
class ShutdownRequest;
class ShutdownReturn;
class TrackMonocularRequest;
class TrackMonocularReturn;

enum NewSLAMRequest_ESensor {
  NewSLAMRequest_ESensor_ROS = 0,
  NewSLAMRequest_ESensor_RGBD = 1,
  NewSLAMRequest_ESensor_STEREO = 2,
  NewSLAMRequest_ESensor_MONOCULAR = 3,
  NewSLAMRequest_ESensor_NewSLAMRequest_ESensor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NewSLAMRequest_ESensor_NewSLAMRequest_ESensor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NewSLAMRequest_ESensor_IsValid(int value);
const NewSLAMRequest_ESensor NewSLAMRequest_ESensor_ESensor_MIN = NewSLAMRequest_ESensor_ROS;
const NewSLAMRequest_ESensor NewSLAMRequest_ESensor_ESensor_MAX = NewSLAMRequest_ESensor_MONOCULAR;
const int NewSLAMRequest_ESensor_ESensor_ARRAYSIZE = NewSLAMRequest_ESensor_ESensor_MAX + 1;

const ::google::protobuf::EnumDescriptor* NewSLAMRequest_ESensor_descriptor();
inline const ::std::string& NewSLAMRequest_ESensor_Name(NewSLAMRequest_ESensor value) {
  return ::google::protobuf::internal::NameOfEnum(
    NewSLAMRequest_ESensor_descriptor(), value);
}
inline bool NewSLAMRequest_ESensor_Parse(
    const ::std::string& name, NewSLAMRequest_ESensor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NewSLAMRequest_ESensor>(
    NewSLAMRequest_ESensor_descriptor(), name, value);
}
// ===================================================================

class NewSLAMRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mono_kitti.NewSLAMRequest) */ {
 public:
  NewSLAMRequest();
  virtual ~NewSLAMRequest();

  NewSLAMRequest(const NewSLAMRequest& from);

  inline NewSLAMRequest& operator=(const NewSLAMRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewSLAMRequest& default_instance();

  void Swap(NewSLAMRequest* other);

  // implements Message ----------------------------------------------

  inline NewSLAMRequest* New() const { return New(NULL); }

  NewSLAMRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewSLAMRequest& from);
  void MergeFrom(const NewSLAMRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewSLAMRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NewSLAMRequest_ESensor ESensor;
  static const ESensor ROS =
    NewSLAMRequest_ESensor_ROS;
  static const ESensor RGBD =
    NewSLAMRequest_ESensor_RGBD;
  static const ESensor STEREO =
    NewSLAMRequest_ESensor_STEREO;
  static const ESensor MONOCULAR =
    NewSLAMRequest_ESensor_MONOCULAR;
  static inline bool ESensor_IsValid(int value) {
    return NewSLAMRequest_ESensor_IsValid(value);
  }
  static const ESensor ESensor_MIN =
    NewSLAMRequest_ESensor_ESensor_MIN;
  static const ESensor ESensor_MAX =
    NewSLAMRequest_ESensor_ESensor_MAX;
  static const int ESensor_ARRAYSIZE =
    NewSLAMRequest_ESensor_ESensor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ESensor_descriptor() {
    return NewSLAMRequest_ESensor_descriptor();
  }
  static inline const ::std::string& ESensor_Name(ESensor value) {
    return NewSLAMRequest_ESensor_Name(value);
  }
  static inline bool ESensor_Parse(const ::std::string& name,
      ESensor* value) {
    return NewSLAMRequest_ESensor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string strVocFile = 1;
  void clear_strvocfile();
  static const int kStrVocFileFieldNumber = 1;
  const ::std::string& strvocfile() const;
  void set_strvocfile(const ::std::string& value);
  void set_strvocfile(const char* value);
  void set_strvocfile(const char* value, size_t size);
  ::std::string* mutable_strvocfile();
  ::std::string* release_strvocfile();
  void set_allocated_strvocfile(::std::string* strvocfile);

  // optional string strSettingFile = 2;
  void clear_strsettingfile();
  static const int kStrSettingFileFieldNumber = 2;
  const ::std::string& strsettingfile() const;
  void set_strsettingfile(const ::std::string& value);
  void set_strsettingfile(const char* value);
  void set_strsettingfile(const char* value, size_t size);
  ::std::string* mutable_strsettingfile();
  ::std::string* release_strsettingfile();
  void set_allocated_strsettingfile(::std::string* strsettingfile);

  // optional .mono_kitti.NewSLAMRequest.ESensor sensor = 3;
  void clear_sensor();
  static const int kSensorFieldNumber = 3;
  ::mono_kitti::NewSLAMRequest_ESensor sensor() const;
  void set_sensor(::mono_kitti::NewSLAMRequest_ESensor value);

  // optional bool bUseViewer = 4;
  void clear_buseviewer();
  static const int kBUseViewerFieldNumber = 4;
  bool buseviewer() const;
  void set_buseviewer(bool value);

  // @@protoc_insertion_point(class_scope:mono_kitti.NewSLAMRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr strvocfile_;
  ::google::protobuf::internal::ArenaStringPtr strsettingfile_;
  int sensor_;
  bool buseviewer_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mono_5fkitti_2eproto();
  friend void protobuf_AssignDesc_mono_5fkitti_2eproto();
  friend void protobuf_ShutdownFile_mono_5fkitti_2eproto();

  void InitAsDefaultInstance();
  static NewSLAMRequest* default_instance_;
};
// -------------------------------------------------------------------

class NewSLAMReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mono_kitti.NewSLAMReturn) */ {
 public:
  NewSLAMReturn();
  virtual ~NewSLAMReturn();

  NewSLAMReturn(const NewSLAMReturn& from);

  inline NewSLAMReturn& operator=(const NewSLAMReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewSLAMReturn& default_instance();

  void Swap(NewSLAMReturn* other);

  // implements Message ----------------------------------------------

  inline NewSLAMReturn* New() const { return New(NULL); }

  NewSLAMReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewSLAMReturn& from);
  void MergeFrom(const NewSLAMReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NewSLAMReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mono_kitti.NewSLAMReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mono_5fkitti_2eproto();
  friend void protobuf_AssignDesc_mono_5fkitti_2eproto();
  friend void protobuf_ShutdownFile_mono_5fkitti_2eproto();

  void InitAsDefaultInstance();
  static NewSLAMReturn* default_instance_;
};
// -------------------------------------------------------------------

class TrackMonocularRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mono_kitti.TrackMonocularRequest) */ {
 public:
  TrackMonocularRequest();
  virtual ~TrackMonocularRequest();

  TrackMonocularRequest(const TrackMonocularRequest& from);

  inline TrackMonocularRequest& operator=(const TrackMonocularRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackMonocularRequest& default_instance();

  void Swap(TrackMonocularRequest* other);

  // implements Message ----------------------------------------------

  inline TrackMonocularRequest* New() const { return New(NULL); }

  TrackMonocularRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackMonocularRequest& from);
  void MergeFrom(const TrackMonocularRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackMonocularRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes im = 1;
  void clear_im();
  static const int kImFieldNumber = 1;
  const ::std::string& im() const;
  void set_im(const ::std::string& value);
  void set_im(const char* value);
  void set_im(const void* value, size_t size);
  ::std::string* mutable_im();
  ::std::string* release_im();
  void set_allocated_im(::std::string* im);

  // optional int32 im_height = 2;
  void clear_im_height();
  static const int kImHeightFieldNumber = 2;
  ::google::protobuf::int32 im_height() const;
  void set_im_height(::google::protobuf::int32 value);

  // optional int32 im_width = 3;
  void clear_im_width();
  static const int kImWidthFieldNumber = 3;
  ::google::protobuf::int32 im_width() const;
  void set_im_width(::google::protobuf::int32 value);

  // optional int32 im_channel = 4;
  void clear_im_channel();
  static const int kImChannelFieldNumber = 4;
  ::google::protobuf::int32 im_channel() const;
  void set_im_channel(::google::protobuf::int32 value);

  // optional int32 im_type = 5;
  void clear_im_type();
  static const int kImTypeFieldNumber = 5;
  ::google::protobuf::int32 im_type() const;
  void set_im_type(::google::protobuf::int32 value);

  // optional double timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:mono_kitti.TrackMonocularRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr im_;
  ::google::protobuf::int32 im_height_;
  ::google::protobuf::int32 im_width_;
  ::google::protobuf::int32 im_channel_;
  ::google::protobuf::int32 im_type_;
  double timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mono_5fkitti_2eproto();
  friend void protobuf_AssignDesc_mono_5fkitti_2eproto();
  friend void protobuf_ShutdownFile_mono_5fkitti_2eproto();

  void InitAsDefaultInstance();
  static TrackMonocularRequest* default_instance_;
};
// -------------------------------------------------------------------

class TrackMonocularReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mono_kitti.TrackMonocularReturn) */ {
 public:
  TrackMonocularReturn();
  virtual ~TrackMonocularReturn();

  TrackMonocularReturn(const TrackMonocularReturn& from);

  inline TrackMonocularReturn& operator=(const TrackMonocularReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackMonocularReturn& default_instance();

  void Swap(TrackMonocularReturn* other);

  // implements Message ----------------------------------------------

  inline TrackMonocularReturn* New() const { return New(NULL); }

  TrackMonocularReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackMonocularReturn& from);
  void MergeFrom(const TrackMonocularReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackMonocularReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes im = 1;
  void clear_im();
  static const int kImFieldNumber = 1;
  const ::std::string& im() const;
  void set_im(const ::std::string& value);
  void set_im(const char* value);
  void set_im(const void* value, size_t size);
  ::std::string* mutable_im();
  ::std::string* release_im();
  void set_allocated_im(::std::string* im);

  // optional int32 im_height = 2;
  void clear_im_height();
  static const int kImHeightFieldNumber = 2;
  ::google::protobuf::int32 im_height() const;
  void set_im_height(::google::protobuf::int32 value);

  // optional int32 im_width = 3;
  void clear_im_width();
  static const int kImWidthFieldNumber = 3;
  ::google::protobuf::int32 im_width() const;
  void set_im_width(::google::protobuf::int32 value);

  // optional int32 im_channel = 4;
  void clear_im_channel();
  static const int kImChannelFieldNumber = 4;
  ::google::protobuf::int32 im_channel() const;
  void set_im_channel(::google::protobuf::int32 value);

  // optional int32 im_type = 5;
  void clear_im_type();
  static const int kImTypeFieldNumber = 5;
  ::google::protobuf::int32 im_type() const;
  void set_im_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mono_kitti.TrackMonocularReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr im_;
  ::google::protobuf::int32 im_height_;
  ::google::protobuf::int32 im_width_;
  ::google::protobuf::int32 im_channel_;
  ::google::protobuf::int32 im_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mono_5fkitti_2eproto();
  friend void protobuf_AssignDesc_mono_5fkitti_2eproto();
  friend void protobuf_ShutdownFile_mono_5fkitti_2eproto();

  void InitAsDefaultInstance();
  static TrackMonocularReturn* default_instance_;
};
// -------------------------------------------------------------------

class ShutdownRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mono_kitti.ShutdownRequest) */ {
 public:
  ShutdownRequest();
  virtual ~ShutdownRequest();

  ShutdownRequest(const ShutdownRequest& from);

  inline ShutdownRequest& operator=(const ShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutdownRequest& default_instance();

  void Swap(ShutdownRequest* other);

  // implements Message ----------------------------------------------

  inline ShutdownRequest* New() const { return New(NULL); }

  ShutdownRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShutdownRequest& from);
  void MergeFrom(const ShutdownRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShutdownRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mono_kitti.ShutdownRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mono_5fkitti_2eproto();
  friend void protobuf_AssignDesc_mono_5fkitti_2eproto();
  friend void protobuf_ShutdownFile_mono_5fkitti_2eproto();

  void InitAsDefaultInstance();
  static ShutdownRequest* default_instance_;
};
// -------------------------------------------------------------------

class ShutdownReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mono_kitti.ShutdownReturn) */ {
 public:
  ShutdownReturn();
  virtual ~ShutdownReturn();

  ShutdownReturn(const ShutdownReturn& from);

  inline ShutdownReturn& operator=(const ShutdownReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutdownReturn& default_instance();

  void Swap(ShutdownReturn* other);

  // implements Message ----------------------------------------------

  inline ShutdownReturn* New() const { return New(NULL); }

  ShutdownReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShutdownReturn& from);
  void MergeFrom(const ShutdownReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShutdownReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mono_kitti.ShutdownReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mono_5fkitti_2eproto();
  friend void protobuf_AssignDesc_mono_5fkitti_2eproto();
  friend void protobuf_ShutdownFile_mono_5fkitti_2eproto();

  void InitAsDefaultInstance();
  static ShutdownReturn* default_instance_;
};
// -------------------------------------------------------------------

class SaveKeyFrameTrajectoryTUMRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mono_kitti.SaveKeyFrameTrajectoryTUMRequest) */ {
 public:
  SaveKeyFrameTrajectoryTUMRequest();
  virtual ~SaveKeyFrameTrajectoryTUMRequest();

  SaveKeyFrameTrajectoryTUMRequest(const SaveKeyFrameTrajectoryTUMRequest& from);

  inline SaveKeyFrameTrajectoryTUMRequest& operator=(const SaveKeyFrameTrajectoryTUMRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveKeyFrameTrajectoryTUMRequest& default_instance();

  void Swap(SaveKeyFrameTrajectoryTUMRequest* other);

  // implements Message ----------------------------------------------

  inline SaveKeyFrameTrajectoryTUMRequest* New() const { return New(NULL); }

  SaveKeyFrameTrajectoryTUMRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveKeyFrameTrajectoryTUMRequest& from);
  void MergeFrom(const SaveKeyFrameTrajectoryTUMRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaveKeyFrameTrajectoryTUMRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mono_5fkitti_2eproto();
  friend void protobuf_AssignDesc_mono_5fkitti_2eproto();
  friend void protobuf_ShutdownFile_mono_5fkitti_2eproto();

  void InitAsDefaultInstance();
  static SaveKeyFrameTrajectoryTUMRequest* default_instance_;
};
// -------------------------------------------------------------------

class SaveKeyFrameTrajectoryTUMReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mono_kitti.SaveKeyFrameTrajectoryTUMReturn) */ {
 public:
  SaveKeyFrameTrajectoryTUMReturn();
  virtual ~SaveKeyFrameTrajectoryTUMReturn();

  SaveKeyFrameTrajectoryTUMReturn(const SaveKeyFrameTrajectoryTUMReturn& from);

  inline SaveKeyFrameTrajectoryTUMReturn& operator=(const SaveKeyFrameTrajectoryTUMReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveKeyFrameTrajectoryTUMReturn& default_instance();

  void Swap(SaveKeyFrameTrajectoryTUMReturn* other);

  // implements Message ----------------------------------------------

  inline SaveKeyFrameTrajectoryTUMReturn* New() const { return New(NULL); }

  SaveKeyFrameTrajectoryTUMReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveKeyFrameTrajectoryTUMReturn& from);
  void MergeFrom(const SaveKeyFrameTrajectoryTUMReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaveKeyFrameTrajectoryTUMReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mono_5fkitti_2eproto();
  friend void protobuf_AssignDesc_mono_5fkitti_2eproto();
  friend void protobuf_ShutdownFile_mono_5fkitti_2eproto();

  void InitAsDefaultInstance();
  static SaveKeyFrameTrajectoryTUMReturn* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NewSLAMRequest

// optional string strVocFile = 1;
inline void NewSLAMRequest::clear_strvocfile() {
  strvocfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewSLAMRequest::strvocfile() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMRequest.strVocFile)
  return strvocfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewSLAMRequest::set_strvocfile(const ::std::string& value) {
  
  strvocfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMRequest.strVocFile)
}
inline void NewSLAMRequest::set_strvocfile(const char* value) {
  
  strvocfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.NewSLAMRequest.strVocFile)
}
inline void NewSLAMRequest::set_strvocfile(const char* value, size_t size) {
  
  strvocfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.NewSLAMRequest.strVocFile)
}
inline ::std::string* NewSLAMRequest::mutable_strvocfile() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.NewSLAMRequest.strVocFile)
  return strvocfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewSLAMRequest::release_strvocfile() {
  // @@protoc_insertion_point(field_release:mono_kitti.NewSLAMRequest.strVocFile)
  
  return strvocfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewSLAMRequest::set_allocated_strvocfile(::std::string* strvocfile) {
  if (strvocfile != NULL) {
    
  } else {
    
  }
  strvocfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvocfile);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.NewSLAMRequest.strVocFile)
}

// optional string strSettingFile = 2;
inline void NewSLAMRequest::clear_strsettingfile() {
  strsettingfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewSLAMRequest::strsettingfile() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMRequest.strSettingFile)
  return strsettingfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewSLAMRequest::set_strsettingfile(const ::std::string& value) {
  
  strsettingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMRequest.strSettingFile)
}
inline void NewSLAMRequest::set_strsettingfile(const char* value) {
  
  strsettingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.NewSLAMRequest.strSettingFile)
}
inline void NewSLAMRequest::set_strsettingfile(const char* value, size_t size) {
  
  strsettingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.NewSLAMRequest.strSettingFile)
}
inline ::std::string* NewSLAMRequest::mutable_strsettingfile() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.NewSLAMRequest.strSettingFile)
  return strsettingfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewSLAMRequest::release_strsettingfile() {
  // @@protoc_insertion_point(field_release:mono_kitti.NewSLAMRequest.strSettingFile)
  
  return strsettingfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewSLAMRequest::set_allocated_strsettingfile(::std::string* strsettingfile) {
  if (strsettingfile != NULL) {
    
  } else {
    
  }
  strsettingfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strsettingfile);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.NewSLAMRequest.strSettingFile)
}

// optional .mono_kitti.NewSLAMRequest.ESensor sensor = 3;
inline void NewSLAMRequest::clear_sensor() {
  sensor_ = 0;
}
inline ::mono_kitti::NewSLAMRequest_ESensor NewSLAMRequest::sensor() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMRequest.sensor)
  return static_cast< ::mono_kitti::NewSLAMRequest_ESensor >(sensor_);
}
inline void NewSLAMRequest::set_sensor(::mono_kitti::NewSLAMRequest_ESensor value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMRequest.sensor)
}

// optional bool bUseViewer = 4;
inline void NewSLAMRequest::clear_buseviewer() {
  buseviewer_ = false;
}
inline bool NewSLAMRequest::buseviewer() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMRequest.bUseViewer)
  return buseviewer_;
}
inline void NewSLAMRequest::set_buseviewer(bool value) {
  
  buseviewer_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMRequest.bUseViewer)
}

// -------------------------------------------------------------------

// NewSLAMReturn

// optional bool success = 1;
inline void NewSLAMReturn::clear_success() {
  success_ = false;
}
inline bool NewSLAMReturn::success() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMReturn.success)
  return success_;
}
inline void NewSLAMReturn::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMReturn.success)
}

// -------------------------------------------------------------------

// TrackMonocularRequest

// optional bytes im = 1;
inline void TrackMonocularRequest::clear_im() {
  im_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackMonocularRequest::im() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im)
  return im_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackMonocularRequest::set_im(const ::std::string& value) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im)
}
inline void TrackMonocularRequest::set_im(const char* value) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.TrackMonocularRequest.im)
}
inline void TrackMonocularRequest::set_im(const void* value, size_t size) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.TrackMonocularRequest.im)
}
inline ::std::string* TrackMonocularRequest::mutable_im() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.TrackMonocularRequest.im)
  return im_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackMonocularRequest::release_im() {
  // @@protoc_insertion_point(field_release:mono_kitti.TrackMonocularRequest.im)
  
  return im_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackMonocularRequest::set_allocated_im(::std::string* im) {
  if (im != NULL) {
    
  } else {
    
  }
  im_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), im);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.TrackMonocularRequest.im)
}

// optional int32 im_height = 2;
inline void TrackMonocularRequest::clear_im_height() {
  im_height_ = 0;
}
inline ::google::protobuf::int32 TrackMonocularRequest::im_height() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im_height)
  return im_height_;
}
inline void TrackMonocularRequest::set_im_height(::google::protobuf::int32 value) {
  
  im_height_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im_height)
}

// optional int32 im_width = 3;
inline void TrackMonocularRequest::clear_im_width() {
  im_width_ = 0;
}
inline ::google::protobuf::int32 TrackMonocularRequest::im_width() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im_width)
  return im_width_;
}
inline void TrackMonocularRequest::set_im_width(::google::protobuf::int32 value) {
  
  im_width_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im_width)
}

// optional int32 im_channel = 4;
inline void TrackMonocularRequest::clear_im_channel() {
  im_channel_ = 0;
}
inline ::google::protobuf::int32 TrackMonocularRequest::im_channel() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im_channel)
  return im_channel_;
}
inline void TrackMonocularRequest::set_im_channel(::google::protobuf::int32 value) {
  
  im_channel_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im_channel)
}

// optional int32 im_type = 5;
inline void TrackMonocularRequest::clear_im_type() {
  im_type_ = 0;
}
inline ::google::protobuf::int32 TrackMonocularRequest::im_type() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im_type)
  return im_type_;
}
inline void TrackMonocularRequest::set_im_type(::google::protobuf::int32 value) {
  
  im_type_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im_type)
}

// optional double timestamp = 6;
inline void TrackMonocularRequest::clear_timestamp() {
  timestamp_ = 0;
}
inline double TrackMonocularRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.timestamp)
  return timestamp_;
}
inline void TrackMonocularRequest::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.timestamp)
}

// -------------------------------------------------------------------

// TrackMonocularReturn

// optional bytes im = 1;
inline void TrackMonocularReturn::clear_im() {
  im_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrackMonocularReturn::im() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im)
  return im_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackMonocularReturn::set_im(const ::std::string& value) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im)
}
inline void TrackMonocularReturn::set_im(const char* value) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.TrackMonocularReturn.im)
}
inline void TrackMonocularReturn::set_im(const void* value, size_t size) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.TrackMonocularReturn.im)
}
inline ::std::string* TrackMonocularReturn::mutable_im() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.TrackMonocularReturn.im)
  return im_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackMonocularReturn::release_im() {
  // @@protoc_insertion_point(field_release:mono_kitti.TrackMonocularReturn.im)
  
  return im_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackMonocularReturn::set_allocated_im(::std::string* im) {
  if (im != NULL) {
    
  } else {
    
  }
  im_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), im);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.TrackMonocularReturn.im)
}

// optional int32 im_height = 2;
inline void TrackMonocularReturn::clear_im_height() {
  im_height_ = 0;
}
inline ::google::protobuf::int32 TrackMonocularReturn::im_height() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im_height)
  return im_height_;
}
inline void TrackMonocularReturn::set_im_height(::google::protobuf::int32 value) {
  
  im_height_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im_height)
}

// optional int32 im_width = 3;
inline void TrackMonocularReturn::clear_im_width() {
  im_width_ = 0;
}
inline ::google::protobuf::int32 TrackMonocularReturn::im_width() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im_width)
  return im_width_;
}
inline void TrackMonocularReturn::set_im_width(::google::protobuf::int32 value) {
  
  im_width_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im_width)
}

// optional int32 im_channel = 4;
inline void TrackMonocularReturn::clear_im_channel() {
  im_channel_ = 0;
}
inline ::google::protobuf::int32 TrackMonocularReturn::im_channel() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im_channel)
  return im_channel_;
}
inline void TrackMonocularReturn::set_im_channel(::google::protobuf::int32 value) {
  
  im_channel_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im_channel)
}

// optional int32 im_type = 5;
inline void TrackMonocularReturn::clear_im_type() {
  im_type_ = 0;
}
inline ::google::protobuf::int32 TrackMonocularReturn::im_type() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im_type)
  return im_type_;
}
inline void TrackMonocularReturn::set_im_type(::google::protobuf::int32 value) {
  
  im_type_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im_type)
}

// -------------------------------------------------------------------

// ShutdownRequest

// -------------------------------------------------------------------

// ShutdownReturn

// optional bool success = 1;
inline void ShutdownReturn::clear_success() {
  success_ = false;
}
inline bool ShutdownReturn::success() const {
  // @@protoc_insertion_point(field_get:mono_kitti.ShutdownReturn.success)
  return success_;
}
inline void ShutdownReturn::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.ShutdownReturn.success)
}

// -------------------------------------------------------------------

// SaveKeyFrameTrajectoryTUMRequest

// optional string filename = 1;
inline void SaveKeyFrameTrajectoryTUMRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SaveKeyFrameTrajectoryTUMRequest::filename() const {
  // @@protoc_insertion_point(field_get:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveKeyFrameTrajectoryTUMRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
}
inline void SaveKeyFrameTrajectoryTUMRequest::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
}
inline void SaveKeyFrameTrajectoryTUMRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
}
inline ::std::string* SaveKeyFrameTrajectoryTUMRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveKeyFrameTrajectoryTUMRequest::release_filename() {
  // @@protoc_insertion_point(field_release:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveKeyFrameTrajectoryTUMRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
}

// -------------------------------------------------------------------

// SaveKeyFrameTrajectoryTUMReturn

// optional bool success = 1;
inline void SaveKeyFrameTrajectoryTUMReturn::clear_success() {
  success_ = false;
}
inline bool SaveKeyFrameTrajectoryTUMReturn::success() const {
  // @@protoc_insertion_point(field_get:mono_kitti.SaveKeyFrameTrajectoryTUMReturn.success)
  return success_;
}
inline void SaveKeyFrameTrajectoryTUMReturn::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.SaveKeyFrameTrajectoryTUMReturn.success)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mono_kitti

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mono_kitti::NewSLAMRequest_ESensor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mono_kitti::NewSLAMRequest_ESensor>() {
  return ::mono_kitti::NewSLAMRequest_ESensor_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mono_5fkitti_2eproto__INCLUDED
