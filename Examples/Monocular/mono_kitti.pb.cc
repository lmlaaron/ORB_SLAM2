// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mono_kitti.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mono_kitti.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mono_kitti {

namespace {

const ::google::protobuf::Descriptor* NewSLAMRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewSLAMRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NewSLAMRequest_ESensor_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NewSLAMReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewSLAMReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackMonocularRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackMonocularRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackMonocularReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackMonocularReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShutdownReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShutdownReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveKeyFrameTrajectoryTUMRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveKeyFrameTrajectoryTUMRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveKeyFrameTrajectoryTUMReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveKeyFrameTrajectoryTUMReturn_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mono_5fkitti_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mono_5fkitti_2eproto() {
  protobuf_AddDesc_mono_5fkitti_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mono_kitti.proto");
  GOOGLE_CHECK(file != NULL);
  NewSLAMRequest_descriptor_ = file->message_type(0);
  static const int NewSLAMRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMRequest, strvocfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMRequest, strsettingfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMRequest, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMRequest, buseviewer_),
  };
  NewSLAMRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewSLAMRequest_descriptor_,
      NewSLAMRequest::default_instance_,
      NewSLAMRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewSLAMRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMRequest, _is_default_instance_));
  NewSLAMRequest_ESensor_descriptor_ = NewSLAMRequest_descriptor_->enum_type(0);
  NewSLAMReturn_descriptor_ = file->message_type(1);
  static const int NewSLAMReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMReturn, success_),
  };
  NewSLAMReturn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewSLAMReturn_descriptor_,
      NewSLAMReturn::default_instance_,
      NewSLAMReturn_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewSLAMReturn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMReturn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSLAMReturn, _is_default_instance_));
  TrackMonocularRequest_descriptor_ = file->message_type(2);
  static const int TrackMonocularRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularRequest, im_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularRequest, im_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularRequest, im_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularRequest, im_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularRequest, im_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularRequest, timestamp_),
  };
  TrackMonocularRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackMonocularRequest_descriptor_,
      TrackMonocularRequest::default_instance_,
      TrackMonocularRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackMonocularRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularRequest, _is_default_instance_));
  TrackMonocularReturn_descriptor_ = file->message_type(3);
  static const int TrackMonocularReturn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularReturn, im_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularReturn, im_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularReturn, im_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularReturn, im_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularReturn, im_type_),
  };
  TrackMonocularReturn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackMonocularReturn_descriptor_,
      TrackMonocularReturn::default_instance_,
      TrackMonocularReturn_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackMonocularReturn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularReturn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackMonocularReturn, _is_default_instance_));
  ShutdownRequest_descriptor_ = file->message_type(4);
  static const int ShutdownRequest_offsets_[1] = {
  };
  ShutdownRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownRequest_descriptor_,
      ShutdownRequest::default_instance_,
      ShutdownRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShutdownRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _is_default_instance_));
  ShutdownReturn_descriptor_ = file->message_type(5);
  static const int ShutdownReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownReturn, success_),
  };
  ShutdownReturn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShutdownReturn_descriptor_,
      ShutdownReturn::default_instance_,
      ShutdownReturn_offsets_,
      -1,
      -1,
      -1,
      sizeof(ShutdownReturn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownReturn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownReturn, _is_default_instance_));
  SaveKeyFrameTrajectoryTUMRequest_descriptor_ = file->message_type(6);
  static const int SaveKeyFrameTrajectoryTUMRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveKeyFrameTrajectoryTUMRequest, filename_),
  };
  SaveKeyFrameTrajectoryTUMRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SaveKeyFrameTrajectoryTUMRequest_descriptor_,
      SaveKeyFrameTrajectoryTUMRequest::default_instance_,
      SaveKeyFrameTrajectoryTUMRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SaveKeyFrameTrajectoryTUMRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveKeyFrameTrajectoryTUMRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveKeyFrameTrajectoryTUMRequest, _is_default_instance_));
  SaveKeyFrameTrajectoryTUMReturn_descriptor_ = file->message_type(7);
  static const int SaveKeyFrameTrajectoryTUMReturn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveKeyFrameTrajectoryTUMReturn, success_),
  };
  SaveKeyFrameTrajectoryTUMReturn_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SaveKeyFrameTrajectoryTUMReturn_descriptor_,
      SaveKeyFrameTrajectoryTUMReturn::default_instance_,
      SaveKeyFrameTrajectoryTUMReturn_offsets_,
      -1,
      -1,
      -1,
      sizeof(SaveKeyFrameTrajectoryTUMReturn),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveKeyFrameTrajectoryTUMReturn, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveKeyFrameTrajectoryTUMReturn, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mono_5fkitti_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewSLAMRequest_descriptor_, &NewSLAMRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewSLAMReturn_descriptor_, &NewSLAMReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackMonocularRequest_descriptor_, &TrackMonocularRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackMonocularReturn_descriptor_, &TrackMonocularReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownRequest_descriptor_, &ShutdownRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShutdownReturn_descriptor_, &ShutdownReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SaveKeyFrameTrajectoryTUMRequest_descriptor_, &SaveKeyFrameTrajectoryTUMRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SaveKeyFrameTrajectoryTUMReturn_descriptor_, &SaveKeyFrameTrajectoryTUMReturn::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mono_5fkitti_2eproto() {
  delete NewSLAMRequest::default_instance_;
  delete NewSLAMRequest_reflection_;
  delete NewSLAMReturn::default_instance_;
  delete NewSLAMReturn_reflection_;
  delete TrackMonocularRequest::default_instance_;
  delete TrackMonocularRequest_reflection_;
  delete TrackMonocularReturn::default_instance_;
  delete TrackMonocularReturn_reflection_;
  delete ShutdownRequest::default_instance_;
  delete ShutdownRequest_reflection_;
  delete ShutdownReturn::default_instance_;
  delete ShutdownReturn_reflection_;
  delete SaveKeyFrameTrajectoryTUMRequest::default_instance_;
  delete SaveKeyFrameTrajectoryTUMRequest_reflection_;
  delete SaveKeyFrameTrajectoryTUMReturn::default_instance_;
  delete SaveKeyFrameTrajectoryTUMReturn_reflection_;
}

void protobuf_AddDesc_mono_5fkitti_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mono_5fkitti_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020mono_kitti.proto\022\nmono_kitti\"\275\001\n\016NewSL"
    "AMRequest\022\022\n\nstrVocFile\030\001 \001(\t\022\026\n\016strSett"
    "ingFile\030\002 \001(\t\0222\n\006sensor\030\003 \001(\0162\".mono_kit"
    "ti.NewSLAMRequest.ESensor\022\022\n\nbUseViewer\030"
    "\004 \001(\010\"7\n\007ESensor\022\007\n\003ROS\020\000\022\010\n\004RGBD\020\001\022\n\n\006S"
    "TEREO\020\002\022\r\n\tMONOCULAR\020\003\" \n\rNewSLAMReturn\022"
    "\017\n\007success\030\001 \001(\010\"\200\001\n\025TrackMonocularReque"
    "st\022\n\n\002im\030\001 \001(\014\022\021\n\tim_height\030\002 \001(\005\022\020\n\010im_"
    "width\030\003 \001(\005\022\022\n\nim_channel\030\004 \001(\005\022\017\n\007im_ty"
    "pe\030\005 \001(\005\022\021\n\ttimestamp\030\006 \001(\001\"l\n\024TrackMono"
    "cularReturn\022\n\n\002im\030\001 \001(\014\022\021\n\tim_height\030\002 \001"
    "(\005\022\020\n\010im_width\030\003 \001(\005\022\022\n\nim_channel\030\004 \001(\005"
    "\022\017\n\007im_type\030\005 \001(\005\"\021\n\017ShutdownRequest\"!\n\016"
    "ShutdownReturn\022\017\n\007success\030\001 \001(\010\"4\n SaveK"
    "eyFrameTrajectoryTUMRequest\022\020\n\010filename\030"
    "\001 \001(\t\"2\n\037SaveKeyFrameTrajectoryTUMReturn"
    "\022\017\n\007success\030\001 \001(\0102\347\002\n\007OrbSLAM\022B\n\007NewSLAM"
    "\022\032.mono_kitti.NewSLAMRequest\032\031.mono_kitt"
    "i.NewSLAMReturn\"\000\022W\n\016TrackMonocular\022!.mo"
    "no_kitti.TrackMonocularRequest\032 .mono_ki"
    "tti.TrackMonocularReturn\"\000\022E\n\010Shutdown\022\033"
    ".mono_kitti.ShutdownRequest\032\032.mono_kitti"
    ".ShutdownReturn\"\000\022x\n\031SaveKeyFrameTraject"
    "oryTUM\022,.mono_kitti.SaveKeyFrameTrajecto"
    "ryTUMRequest\032+.mono_kitti.SaveKeyFrameTr"
    "ajectoryTUMReturn\"\000B0\n\033io.grpc.examples."
    "mono_kittiB\tMonoKittiP\001\242\002\003KITb\006proto3", 1077);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mono_kitti.proto", &protobuf_RegisterTypes);
  NewSLAMRequest::default_instance_ = new NewSLAMRequest();
  NewSLAMReturn::default_instance_ = new NewSLAMReturn();
  TrackMonocularRequest::default_instance_ = new TrackMonocularRequest();
  TrackMonocularReturn::default_instance_ = new TrackMonocularReturn();
  ShutdownRequest::default_instance_ = new ShutdownRequest();
  ShutdownReturn::default_instance_ = new ShutdownReturn();
  SaveKeyFrameTrajectoryTUMRequest::default_instance_ = new SaveKeyFrameTrajectoryTUMRequest();
  SaveKeyFrameTrajectoryTUMReturn::default_instance_ = new SaveKeyFrameTrajectoryTUMReturn();
  NewSLAMRequest::default_instance_->InitAsDefaultInstance();
  NewSLAMReturn::default_instance_->InitAsDefaultInstance();
  TrackMonocularRequest::default_instance_->InitAsDefaultInstance();
  TrackMonocularReturn::default_instance_->InitAsDefaultInstance();
  ShutdownRequest::default_instance_->InitAsDefaultInstance();
  ShutdownReturn::default_instance_->InitAsDefaultInstance();
  SaveKeyFrameTrajectoryTUMRequest::default_instance_->InitAsDefaultInstance();
  SaveKeyFrameTrajectoryTUMReturn::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mono_5fkitti_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mono_5fkitti_2eproto {
  StaticDescriptorInitializer_mono_5fkitti_2eproto() {
    protobuf_AddDesc_mono_5fkitti_2eproto();
  }
} static_descriptor_initializer_mono_5fkitti_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* NewSLAMRequest_ESensor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewSLAMRequest_ESensor_descriptor_;
}
bool NewSLAMRequest_ESensor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NewSLAMRequest_ESensor NewSLAMRequest::ROS;
const NewSLAMRequest_ESensor NewSLAMRequest::RGBD;
const NewSLAMRequest_ESensor NewSLAMRequest::STEREO;
const NewSLAMRequest_ESensor NewSLAMRequest::MONOCULAR;
const NewSLAMRequest_ESensor NewSLAMRequest::ESensor_MIN;
const NewSLAMRequest_ESensor NewSLAMRequest::ESensor_MAX;
const int NewSLAMRequest::ESensor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewSLAMRequest::kStrVocFileFieldNumber;
const int NewSLAMRequest::kStrSettingFileFieldNumber;
const int NewSLAMRequest::kSensorFieldNumber;
const int NewSLAMRequest::kBUseViewerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewSLAMRequest::NewSLAMRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mono_kitti.NewSLAMRequest)
}

void NewSLAMRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewSLAMRequest::NewSLAMRequest(const NewSLAMRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mono_kitti.NewSLAMRequest)
}

void NewSLAMRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strvocfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strsettingfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_ = 0;
  buseviewer_ = false;
}

NewSLAMRequest::~NewSLAMRequest() {
  // @@protoc_insertion_point(destructor:mono_kitti.NewSLAMRequest)
  SharedDtor();
}

void NewSLAMRequest::SharedDtor() {
  strvocfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strsettingfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NewSLAMRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewSLAMRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewSLAMRequest_descriptor_;
}

const NewSLAMRequest& NewSLAMRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mono_5fkitti_2eproto();
  return *default_instance_;
}

NewSLAMRequest* NewSLAMRequest::default_instance_ = NULL;

NewSLAMRequest* NewSLAMRequest::New(::google::protobuf::Arena* arena) const {
  NewSLAMRequest* n = new NewSLAMRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewSLAMRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mono_kitti.NewSLAMRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NewSLAMRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NewSLAMRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sensor_, buseviewer_);
  strvocfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strsettingfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool NewSLAMRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mono_kitti.NewSLAMRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strVocFile = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvocfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strvocfile().data(), this->strvocfile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mono_kitti.NewSLAMRequest.strVocFile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_strSettingFile;
        break;
      }

      // optional string strSettingFile = 2;
      case 2: {
        if (tag == 18) {
         parse_strSettingFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsettingfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strsettingfile().data(), this->strsettingfile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mono_kitti.NewSLAMRequest.strSettingFile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sensor;
        break;
      }

      // optional .mono_kitti.NewSLAMRequest.ESensor sensor = 3;
      case 3: {
        if (tag == 24) {
         parse_sensor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sensor(static_cast< ::mono_kitti::NewSLAMRequest_ESensor >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bUseViewer;
        break;
      }

      // optional bool bUseViewer = 4;
      case 4: {
        if (tag == 32) {
         parse_bUseViewer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buseviewer_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mono_kitti.NewSLAMRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mono_kitti.NewSLAMRequest)
  return false;
#undef DO_
}

void NewSLAMRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mono_kitti.NewSLAMRequest)
  // optional string strVocFile = 1;
  if (this->strvocfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strvocfile().data(), this->strvocfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mono_kitti.NewSLAMRequest.strVocFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strvocfile(), output);
  }

  // optional string strSettingFile = 2;
  if (this->strsettingfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strsettingfile().data(), this->strsettingfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mono_kitti.NewSLAMRequest.strSettingFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strsettingfile(), output);
  }

  // optional .mono_kitti.NewSLAMRequest.ESensor sensor = 3;
  if (this->sensor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sensor(), output);
  }

  // optional bool bUseViewer = 4;
  if (this->buseviewer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->buseviewer(), output);
  }

  // @@protoc_insertion_point(serialize_end:mono_kitti.NewSLAMRequest)
}

::google::protobuf::uint8* NewSLAMRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mono_kitti.NewSLAMRequest)
  // optional string strVocFile = 1;
  if (this->strvocfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strvocfile().data(), this->strvocfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mono_kitti.NewSLAMRequest.strVocFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strvocfile(), target);
  }

  // optional string strSettingFile = 2;
  if (this->strsettingfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strsettingfile().data(), this->strsettingfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mono_kitti.NewSLAMRequest.strSettingFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strsettingfile(), target);
  }

  // optional .mono_kitti.NewSLAMRequest.ESensor sensor = 3;
  if (this->sensor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sensor(), target);
  }

  // optional bool bUseViewer = 4;
  if (this->buseviewer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->buseviewer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mono_kitti.NewSLAMRequest)
  return target;
}

int NewSLAMRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mono_kitti.NewSLAMRequest)
  int total_size = 0;

  // optional string strVocFile = 1;
  if (this->strvocfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strvocfile());
  }

  // optional string strSettingFile = 2;
  if (this->strsettingfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strsettingfile());
  }

  // optional .mono_kitti.NewSLAMRequest.ESensor sensor = 3;
  if (this->sensor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sensor());
  }

  // optional bool bUseViewer = 4;
  if (this->buseviewer() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewSLAMRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mono_kitti.NewSLAMRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewSLAMRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewSLAMRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mono_kitti.NewSLAMRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mono_kitti.NewSLAMRequest)
    MergeFrom(*source);
  }
}

void NewSLAMRequest::MergeFrom(const NewSLAMRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mono_kitti.NewSLAMRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.strvocfile().size() > 0) {

    strvocfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strvocfile_);
  }
  if (from.strsettingfile().size() > 0) {

    strsettingfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strsettingfile_);
  }
  if (from.sensor() != 0) {
    set_sensor(from.sensor());
  }
  if (from.buseviewer() != 0) {
    set_buseviewer(from.buseviewer());
  }
}

void NewSLAMRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mono_kitti.NewSLAMRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSLAMRequest::CopyFrom(const NewSLAMRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mono_kitti.NewSLAMRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSLAMRequest::IsInitialized() const {

  return true;
}

void NewSLAMRequest::Swap(NewSLAMRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewSLAMRequest::InternalSwap(NewSLAMRequest* other) {
  strvocfile_.Swap(&other->strvocfile_);
  strsettingfile_.Swap(&other->strsettingfile_);
  std::swap(sensor_, other->sensor_);
  std::swap(buseviewer_, other->buseviewer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewSLAMRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewSLAMRequest_descriptor_;
  metadata.reflection = NewSLAMRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewSLAMRequest

// optional string strVocFile = 1;
void NewSLAMRequest::clear_strvocfile() {
  strvocfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NewSLAMRequest::strvocfile() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMRequest.strVocFile)
  return strvocfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSLAMRequest::set_strvocfile(const ::std::string& value) {
  
  strvocfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMRequest.strVocFile)
}
 void NewSLAMRequest::set_strvocfile(const char* value) {
  
  strvocfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.NewSLAMRequest.strVocFile)
}
 void NewSLAMRequest::set_strvocfile(const char* value, size_t size) {
  
  strvocfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.NewSLAMRequest.strVocFile)
}
 ::std::string* NewSLAMRequest::mutable_strvocfile() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.NewSLAMRequest.strVocFile)
  return strvocfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewSLAMRequest::release_strvocfile() {
  // @@protoc_insertion_point(field_release:mono_kitti.NewSLAMRequest.strVocFile)
  
  return strvocfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSLAMRequest::set_allocated_strvocfile(::std::string* strvocfile) {
  if (strvocfile != NULL) {
    
  } else {
    
  }
  strvocfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strvocfile);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.NewSLAMRequest.strVocFile)
}

// optional string strSettingFile = 2;
void NewSLAMRequest::clear_strsettingfile() {
  strsettingfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NewSLAMRequest::strsettingfile() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMRequest.strSettingFile)
  return strsettingfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSLAMRequest::set_strsettingfile(const ::std::string& value) {
  
  strsettingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMRequest.strSettingFile)
}
 void NewSLAMRequest::set_strsettingfile(const char* value) {
  
  strsettingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.NewSLAMRequest.strSettingFile)
}
 void NewSLAMRequest::set_strsettingfile(const char* value, size_t size) {
  
  strsettingfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.NewSLAMRequest.strSettingFile)
}
 ::std::string* NewSLAMRequest::mutable_strsettingfile() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.NewSLAMRequest.strSettingFile)
  return strsettingfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NewSLAMRequest::release_strsettingfile() {
  // @@protoc_insertion_point(field_release:mono_kitti.NewSLAMRequest.strSettingFile)
  
  return strsettingfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NewSLAMRequest::set_allocated_strsettingfile(::std::string* strsettingfile) {
  if (strsettingfile != NULL) {
    
  } else {
    
  }
  strsettingfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strsettingfile);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.NewSLAMRequest.strSettingFile)
}

// optional .mono_kitti.NewSLAMRequest.ESensor sensor = 3;
void NewSLAMRequest::clear_sensor() {
  sensor_ = 0;
}
 ::mono_kitti::NewSLAMRequest_ESensor NewSLAMRequest::sensor() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMRequest.sensor)
  return static_cast< ::mono_kitti::NewSLAMRequest_ESensor >(sensor_);
}
 void NewSLAMRequest::set_sensor(::mono_kitti::NewSLAMRequest_ESensor value) {
  
  sensor_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMRequest.sensor)
}

// optional bool bUseViewer = 4;
void NewSLAMRequest::clear_buseviewer() {
  buseviewer_ = false;
}
 bool NewSLAMRequest::buseviewer() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMRequest.bUseViewer)
  return buseviewer_;
}
 void NewSLAMRequest::set_buseviewer(bool value) {
  
  buseviewer_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMRequest.bUseViewer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewSLAMReturn::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewSLAMReturn::NewSLAMReturn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mono_kitti.NewSLAMReturn)
}

void NewSLAMReturn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewSLAMReturn::NewSLAMReturn(const NewSLAMReturn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mono_kitti.NewSLAMReturn)
}

void NewSLAMReturn::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  success_ = false;
}

NewSLAMReturn::~NewSLAMReturn() {
  // @@protoc_insertion_point(destructor:mono_kitti.NewSLAMReturn)
  SharedDtor();
}

void NewSLAMReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewSLAMReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewSLAMReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewSLAMReturn_descriptor_;
}

const NewSLAMReturn& NewSLAMReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mono_5fkitti_2eproto();
  return *default_instance_;
}

NewSLAMReturn* NewSLAMReturn::default_instance_ = NULL;

NewSLAMReturn* NewSLAMReturn::New(::google::protobuf::Arena* arena) const {
  NewSLAMReturn* n = new NewSLAMReturn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewSLAMReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:mono_kitti.NewSLAMReturn)
  success_ = false;
}

bool NewSLAMReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mono_kitti.NewSLAMReturn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mono_kitti.NewSLAMReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mono_kitti.NewSLAMReturn)
  return false;
#undef DO_
}

void NewSLAMReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mono_kitti.NewSLAMReturn)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:mono_kitti.NewSLAMReturn)
}

::google::protobuf::uint8* NewSLAMReturn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mono_kitti.NewSLAMReturn)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mono_kitti.NewSLAMReturn)
  return target;
}

int NewSLAMReturn::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mono_kitti.NewSLAMReturn)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewSLAMReturn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mono_kitti.NewSLAMReturn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewSLAMReturn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewSLAMReturn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mono_kitti.NewSLAMReturn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mono_kitti.NewSLAMReturn)
    MergeFrom(*source);
  }
}

void NewSLAMReturn::MergeFrom(const NewSLAMReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mono_kitti.NewSLAMReturn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void NewSLAMReturn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mono_kitti.NewSLAMReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSLAMReturn::CopyFrom(const NewSLAMReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mono_kitti.NewSLAMReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSLAMReturn::IsInitialized() const {

  return true;
}

void NewSLAMReturn::Swap(NewSLAMReturn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewSLAMReturn::InternalSwap(NewSLAMReturn* other) {
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewSLAMReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewSLAMReturn_descriptor_;
  metadata.reflection = NewSLAMReturn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewSLAMReturn

// optional bool success = 1;
void NewSLAMReturn::clear_success() {
  success_ = false;
}
 bool NewSLAMReturn::success() const {
  // @@protoc_insertion_point(field_get:mono_kitti.NewSLAMReturn.success)
  return success_;
}
 void NewSLAMReturn::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.NewSLAMReturn.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackMonocularRequest::kImFieldNumber;
const int TrackMonocularRequest::kImHeightFieldNumber;
const int TrackMonocularRequest::kImWidthFieldNumber;
const int TrackMonocularRequest::kImChannelFieldNumber;
const int TrackMonocularRequest::kImTypeFieldNumber;
const int TrackMonocularRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackMonocularRequest::TrackMonocularRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mono_kitti.TrackMonocularRequest)
}

void TrackMonocularRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackMonocularRequest::TrackMonocularRequest(const TrackMonocularRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mono_kitti.TrackMonocularRequest)
}

void TrackMonocularRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  im_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  im_height_ = 0;
  im_width_ = 0;
  im_channel_ = 0;
  im_type_ = 0;
  timestamp_ = 0;
}

TrackMonocularRequest::~TrackMonocularRequest() {
  // @@protoc_insertion_point(destructor:mono_kitti.TrackMonocularRequest)
  SharedDtor();
}

void TrackMonocularRequest::SharedDtor() {
  im_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrackMonocularRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackMonocularRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackMonocularRequest_descriptor_;
}

const TrackMonocularRequest& TrackMonocularRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mono_5fkitti_2eproto();
  return *default_instance_;
}

TrackMonocularRequest* TrackMonocularRequest::default_instance_ = NULL;

TrackMonocularRequest* TrackMonocularRequest::New(::google::protobuf::Arena* arena) const {
  TrackMonocularRequest* n = new TrackMonocularRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackMonocularRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mono_kitti.TrackMonocularRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrackMonocularRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackMonocularRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(im_height_, timestamp_);
  im_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TrackMonocularRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mono_kitti.TrackMonocularRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes im = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_im()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_im_height;
        break;
      }

      // optional int32 im_height = 2;
      case 2: {
        if (tag == 16) {
         parse_im_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &im_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_im_width;
        break;
      }

      // optional int32 im_width = 3;
      case 3: {
        if (tag == 24) {
         parse_im_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &im_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_im_channel;
        break;
      }

      // optional int32 im_channel = 4;
      case 4: {
        if (tag == 32) {
         parse_im_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &im_channel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_im_type;
        break;
      }

      // optional int32 im_type = 5;
      case 5: {
        if (tag == 40) {
         parse_im_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &im_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 6;
      case 6: {
        if (tag == 49) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mono_kitti.TrackMonocularRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mono_kitti.TrackMonocularRequest)
  return false;
#undef DO_
}

void TrackMonocularRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mono_kitti.TrackMonocularRequest)
  // optional bytes im = 1;
  if (this->im().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->im(), output);
  }

  // optional int32 im_height = 2;
  if (this->im_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->im_height(), output);
  }

  // optional int32 im_width = 3;
  if (this->im_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->im_width(), output);
  }

  // optional int32 im_channel = 4;
  if (this->im_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->im_channel(), output);
  }

  // optional int32 im_type = 5;
  if (this->im_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->im_type(), output);
  }

  // optional double timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:mono_kitti.TrackMonocularRequest)
}

::google::protobuf::uint8* TrackMonocularRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mono_kitti.TrackMonocularRequest)
  // optional bytes im = 1;
  if (this->im().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->im(), target);
  }

  // optional int32 im_height = 2;
  if (this->im_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->im_height(), target);
  }

  // optional int32 im_width = 3;
  if (this->im_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->im_width(), target);
  }

  // optional int32 im_channel = 4;
  if (this->im_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->im_channel(), target);
  }

  // optional int32 im_type = 5;
  if (this->im_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->im_type(), target);
  }

  // optional double timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mono_kitti.TrackMonocularRequest)
  return target;
}

int TrackMonocularRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mono_kitti.TrackMonocularRequest)
  int total_size = 0;

  // optional bytes im = 1;
  if (this->im().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->im());
  }

  // optional int32 im_height = 2;
  if (this->im_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->im_height());
  }

  // optional int32 im_width = 3;
  if (this->im_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->im_width());
  }

  // optional int32 im_channel = 4;
  if (this->im_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->im_channel());
  }

  // optional int32 im_type = 5;
  if (this->im_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->im_type());
  }

  // optional double timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackMonocularRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mono_kitti.TrackMonocularRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackMonocularRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackMonocularRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mono_kitti.TrackMonocularRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mono_kitti.TrackMonocularRequest)
    MergeFrom(*source);
  }
}

void TrackMonocularRequest::MergeFrom(const TrackMonocularRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mono_kitti.TrackMonocularRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.im().size() > 0) {

    im_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.im_);
  }
  if (from.im_height() != 0) {
    set_im_height(from.im_height());
  }
  if (from.im_width() != 0) {
    set_im_width(from.im_width());
  }
  if (from.im_channel() != 0) {
    set_im_channel(from.im_channel());
  }
  if (from.im_type() != 0) {
    set_im_type(from.im_type());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TrackMonocularRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mono_kitti.TrackMonocularRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackMonocularRequest::CopyFrom(const TrackMonocularRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mono_kitti.TrackMonocularRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMonocularRequest::IsInitialized() const {

  return true;
}

void TrackMonocularRequest::Swap(TrackMonocularRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackMonocularRequest::InternalSwap(TrackMonocularRequest* other) {
  im_.Swap(&other->im_);
  std::swap(im_height_, other->im_height_);
  std::swap(im_width_, other->im_width_);
  std::swap(im_channel_, other->im_channel_);
  std::swap(im_type_, other->im_type_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackMonocularRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackMonocularRequest_descriptor_;
  metadata.reflection = TrackMonocularRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackMonocularRequest

// optional bytes im = 1;
void TrackMonocularRequest::clear_im() {
  im_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TrackMonocularRequest::im() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im)
  return im_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackMonocularRequest::set_im(const ::std::string& value) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im)
}
 void TrackMonocularRequest::set_im(const char* value) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.TrackMonocularRequest.im)
}
 void TrackMonocularRequest::set_im(const void* value, size_t size) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.TrackMonocularRequest.im)
}
 ::std::string* TrackMonocularRequest::mutable_im() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.TrackMonocularRequest.im)
  return im_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrackMonocularRequest::release_im() {
  // @@protoc_insertion_point(field_release:mono_kitti.TrackMonocularRequest.im)
  
  return im_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackMonocularRequest::set_allocated_im(::std::string* im) {
  if (im != NULL) {
    
  } else {
    
  }
  im_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), im);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.TrackMonocularRequest.im)
}

// optional int32 im_height = 2;
void TrackMonocularRequest::clear_im_height() {
  im_height_ = 0;
}
 ::google::protobuf::int32 TrackMonocularRequest::im_height() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im_height)
  return im_height_;
}
 void TrackMonocularRequest::set_im_height(::google::protobuf::int32 value) {
  
  im_height_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im_height)
}

// optional int32 im_width = 3;
void TrackMonocularRequest::clear_im_width() {
  im_width_ = 0;
}
 ::google::protobuf::int32 TrackMonocularRequest::im_width() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im_width)
  return im_width_;
}
 void TrackMonocularRequest::set_im_width(::google::protobuf::int32 value) {
  
  im_width_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im_width)
}

// optional int32 im_channel = 4;
void TrackMonocularRequest::clear_im_channel() {
  im_channel_ = 0;
}
 ::google::protobuf::int32 TrackMonocularRequest::im_channel() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im_channel)
  return im_channel_;
}
 void TrackMonocularRequest::set_im_channel(::google::protobuf::int32 value) {
  
  im_channel_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im_channel)
}

// optional int32 im_type = 5;
void TrackMonocularRequest::clear_im_type() {
  im_type_ = 0;
}
 ::google::protobuf::int32 TrackMonocularRequest::im_type() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.im_type)
  return im_type_;
}
 void TrackMonocularRequest::set_im_type(::google::protobuf::int32 value) {
  
  im_type_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.im_type)
}

// optional double timestamp = 6;
void TrackMonocularRequest::clear_timestamp() {
  timestamp_ = 0;
}
 double TrackMonocularRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularRequest.timestamp)
  return timestamp_;
}
 void TrackMonocularRequest::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackMonocularReturn::kImFieldNumber;
const int TrackMonocularReturn::kImHeightFieldNumber;
const int TrackMonocularReturn::kImWidthFieldNumber;
const int TrackMonocularReturn::kImChannelFieldNumber;
const int TrackMonocularReturn::kImTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackMonocularReturn::TrackMonocularReturn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mono_kitti.TrackMonocularReturn)
}

void TrackMonocularReturn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TrackMonocularReturn::TrackMonocularReturn(const TrackMonocularReturn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mono_kitti.TrackMonocularReturn)
}

void TrackMonocularReturn::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  im_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  im_height_ = 0;
  im_width_ = 0;
  im_channel_ = 0;
  im_type_ = 0;
}

TrackMonocularReturn::~TrackMonocularReturn() {
  // @@protoc_insertion_point(destructor:mono_kitti.TrackMonocularReturn)
  SharedDtor();
}

void TrackMonocularReturn::SharedDtor() {
  im_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TrackMonocularReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackMonocularReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackMonocularReturn_descriptor_;
}

const TrackMonocularReturn& TrackMonocularReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mono_5fkitti_2eproto();
  return *default_instance_;
}

TrackMonocularReturn* TrackMonocularReturn::default_instance_ = NULL;

TrackMonocularReturn* TrackMonocularReturn::New(::google::protobuf::Arena* arena) const {
  TrackMonocularReturn* n = new TrackMonocularReturn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackMonocularReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:mono_kitti.TrackMonocularReturn)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrackMonocularReturn, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackMonocularReturn*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(im_height_, im_type_);
  im_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TrackMonocularReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mono_kitti.TrackMonocularReturn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes im = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_im()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_im_height;
        break;
      }

      // optional int32 im_height = 2;
      case 2: {
        if (tag == 16) {
         parse_im_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &im_height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_im_width;
        break;
      }

      // optional int32 im_width = 3;
      case 3: {
        if (tag == 24) {
         parse_im_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &im_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_im_channel;
        break;
      }

      // optional int32 im_channel = 4;
      case 4: {
        if (tag == 32) {
         parse_im_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &im_channel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_im_type;
        break;
      }

      // optional int32 im_type = 5;
      case 5: {
        if (tag == 40) {
         parse_im_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &im_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mono_kitti.TrackMonocularReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mono_kitti.TrackMonocularReturn)
  return false;
#undef DO_
}

void TrackMonocularReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mono_kitti.TrackMonocularReturn)
  // optional bytes im = 1;
  if (this->im().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->im(), output);
  }

  // optional int32 im_height = 2;
  if (this->im_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->im_height(), output);
  }

  // optional int32 im_width = 3;
  if (this->im_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->im_width(), output);
  }

  // optional int32 im_channel = 4;
  if (this->im_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->im_channel(), output);
  }

  // optional int32 im_type = 5;
  if (this->im_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->im_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:mono_kitti.TrackMonocularReturn)
}

::google::protobuf::uint8* TrackMonocularReturn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mono_kitti.TrackMonocularReturn)
  // optional bytes im = 1;
  if (this->im().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->im(), target);
  }

  // optional int32 im_height = 2;
  if (this->im_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->im_height(), target);
  }

  // optional int32 im_width = 3;
  if (this->im_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->im_width(), target);
  }

  // optional int32 im_channel = 4;
  if (this->im_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->im_channel(), target);
  }

  // optional int32 im_type = 5;
  if (this->im_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->im_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mono_kitti.TrackMonocularReturn)
  return target;
}

int TrackMonocularReturn::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mono_kitti.TrackMonocularReturn)
  int total_size = 0;

  // optional bytes im = 1;
  if (this->im().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->im());
  }

  // optional int32 im_height = 2;
  if (this->im_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->im_height());
  }

  // optional int32 im_width = 3;
  if (this->im_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->im_width());
  }

  // optional int32 im_channel = 4;
  if (this->im_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->im_channel());
  }

  // optional int32 im_type = 5;
  if (this->im_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->im_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackMonocularReturn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mono_kitti.TrackMonocularReturn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackMonocularReturn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackMonocularReturn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mono_kitti.TrackMonocularReturn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mono_kitti.TrackMonocularReturn)
    MergeFrom(*source);
  }
}

void TrackMonocularReturn::MergeFrom(const TrackMonocularReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mono_kitti.TrackMonocularReturn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.im().size() > 0) {

    im_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.im_);
  }
  if (from.im_height() != 0) {
    set_im_height(from.im_height());
  }
  if (from.im_width() != 0) {
    set_im_width(from.im_width());
  }
  if (from.im_channel() != 0) {
    set_im_channel(from.im_channel());
  }
  if (from.im_type() != 0) {
    set_im_type(from.im_type());
  }
}

void TrackMonocularReturn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mono_kitti.TrackMonocularReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackMonocularReturn::CopyFrom(const TrackMonocularReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mono_kitti.TrackMonocularReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackMonocularReturn::IsInitialized() const {

  return true;
}

void TrackMonocularReturn::Swap(TrackMonocularReturn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackMonocularReturn::InternalSwap(TrackMonocularReturn* other) {
  im_.Swap(&other->im_);
  std::swap(im_height_, other->im_height_);
  std::swap(im_width_, other->im_width_);
  std::swap(im_channel_, other->im_channel_);
  std::swap(im_type_, other->im_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackMonocularReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackMonocularReturn_descriptor_;
  metadata.reflection = TrackMonocularReturn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackMonocularReturn

// optional bytes im = 1;
void TrackMonocularReturn::clear_im() {
  im_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TrackMonocularReturn::im() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im)
  return im_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackMonocularReturn::set_im(const ::std::string& value) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im)
}
 void TrackMonocularReturn::set_im(const char* value) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.TrackMonocularReturn.im)
}
 void TrackMonocularReturn::set_im(const void* value, size_t size) {
  
  im_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.TrackMonocularReturn.im)
}
 ::std::string* TrackMonocularReturn::mutable_im() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.TrackMonocularReturn.im)
  return im_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrackMonocularReturn::release_im() {
  // @@protoc_insertion_point(field_release:mono_kitti.TrackMonocularReturn.im)
  
  return im_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackMonocularReturn::set_allocated_im(::std::string* im) {
  if (im != NULL) {
    
  } else {
    
  }
  im_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), im);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.TrackMonocularReturn.im)
}

// optional int32 im_height = 2;
void TrackMonocularReturn::clear_im_height() {
  im_height_ = 0;
}
 ::google::protobuf::int32 TrackMonocularReturn::im_height() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im_height)
  return im_height_;
}
 void TrackMonocularReturn::set_im_height(::google::protobuf::int32 value) {
  
  im_height_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im_height)
}

// optional int32 im_width = 3;
void TrackMonocularReturn::clear_im_width() {
  im_width_ = 0;
}
 ::google::protobuf::int32 TrackMonocularReturn::im_width() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im_width)
  return im_width_;
}
 void TrackMonocularReturn::set_im_width(::google::protobuf::int32 value) {
  
  im_width_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im_width)
}

// optional int32 im_channel = 4;
void TrackMonocularReturn::clear_im_channel() {
  im_channel_ = 0;
}
 ::google::protobuf::int32 TrackMonocularReturn::im_channel() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im_channel)
  return im_channel_;
}
 void TrackMonocularReturn::set_im_channel(::google::protobuf::int32 value) {
  
  im_channel_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im_channel)
}

// optional int32 im_type = 5;
void TrackMonocularReturn::clear_im_type() {
  im_type_ = 0;
}
 ::google::protobuf::int32 TrackMonocularReturn::im_type() const {
  // @@protoc_insertion_point(field_get:mono_kitti.TrackMonocularReturn.im_type)
  return im_type_;
}
 void TrackMonocularReturn::set_im_type(::google::protobuf::int32 value) {
  
  im_type_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.TrackMonocularReturn.im_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownRequest::ShutdownRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mono_kitti.ShutdownRequest)
}

void ShutdownRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mono_kitti.ShutdownRequest)
}

void ShutdownRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ShutdownRequest::~ShutdownRequest() {
  // @@protoc_insertion_point(destructor:mono_kitti.ShutdownRequest)
  SharedDtor();
}

void ShutdownRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownRequest_descriptor_;
}

const ShutdownRequest& ShutdownRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mono_5fkitti_2eproto();
  return *default_instance_;
}

ShutdownRequest* ShutdownRequest::default_instance_ = NULL;

ShutdownRequest* ShutdownRequest::New(::google::protobuf::Arena* arena) const {
  ShutdownRequest* n = new ShutdownRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mono_kitti.ShutdownRequest)
}

bool ShutdownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mono_kitti.ShutdownRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:mono_kitti.ShutdownRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mono_kitti.ShutdownRequest)
  return false;
#undef DO_
}

void ShutdownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mono_kitti.ShutdownRequest)
  // @@protoc_insertion_point(serialize_end:mono_kitti.ShutdownRequest)
}

::google::protobuf::uint8* ShutdownRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mono_kitti.ShutdownRequest)
  // @@protoc_insertion_point(serialize_to_array_end:mono_kitti.ShutdownRequest)
  return target;
}

int ShutdownRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mono_kitti.ShutdownRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mono_kitti.ShutdownRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShutdownRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mono_kitti.ShutdownRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mono_kitti.ShutdownRequest)
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mono_kitti.ShutdownRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ShutdownRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mono_kitti.ShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mono_kitti.ShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {

  return true;
}

void ShutdownRequest::Swap(ShutdownRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownRequest::InternalSwap(ShutdownRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownRequest_descriptor_;
  metadata.reflection = ShutdownRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownReturn::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownReturn::ShutdownReturn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mono_kitti.ShutdownReturn)
}

void ShutdownReturn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ShutdownReturn::ShutdownReturn(const ShutdownReturn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mono_kitti.ShutdownReturn)
}

void ShutdownReturn::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  success_ = false;
}

ShutdownReturn::~ShutdownReturn() {
  // @@protoc_insertion_point(destructor:mono_kitti.ShutdownReturn)
  SharedDtor();
}

void ShutdownReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShutdownReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShutdownReturn_descriptor_;
}

const ShutdownReturn& ShutdownReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mono_5fkitti_2eproto();
  return *default_instance_;
}

ShutdownReturn* ShutdownReturn::default_instance_ = NULL;

ShutdownReturn* ShutdownReturn::New(::google::protobuf::Arena* arena) const {
  ShutdownReturn* n = new ShutdownReturn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:mono_kitti.ShutdownReturn)
  success_ = false;
}

bool ShutdownReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mono_kitti.ShutdownReturn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mono_kitti.ShutdownReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mono_kitti.ShutdownReturn)
  return false;
#undef DO_
}

void ShutdownReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mono_kitti.ShutdownReturn)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:mono_kitti.ShutdownReturn)
}

::google::protobuf::uint8* ShutdownReturn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mono_kitti.ShutdownReturn)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mono_kitti.ShutdownReturn)
  return target;
}

int ShutdownReturn::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mono_kitti.ShutdownReturn)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownReturn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mono_kitti.ShutdownReturn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShutdownReturn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownReturn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mono_kitti.ShutdownReturn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mono_kitti.ShutdownReturn)
    MergeFrom(*source);
  }
}

void ShutdownReturn::MergeFrom(const ShutdownReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mono_kitti.ShutdownReturn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void ShutdownReturn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mono_kitti.ShutdownReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownReturn::CopyFrom(const ShutdownReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mono_kitti.ShutdownReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownReturn::IsInitialized() const {

  return true;
}

void ShutdownReturn::Swap(ShutdownReturn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownReturn::InternalSwap(ShutdownReturn* other) {
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShutdownReturn_descriptor_;
  metadata.reflection = ShutdownReturn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownReturn

// optional bool success = 1;
void ShutdownReturn::clear_success() {
  success_ = false;
}
 bool ShutdownReturn::success() const {
  // @@protoc_insertion_point(field_get:mono_kitti.ShutdownReturn.success)
  return success_;
}
 void ShutdownReturn::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.ShutdownReturn.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SaveKeyFrameTrajectoryTUMRequest::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SaveKeyFrameTrajectoryTUMRequest::SaveKeyFrameTrajectoryTUMRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
}

void SaveKeyFrameTrajectoryTUMRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SaveKeyFrameTrajectoryTUMRequest::SaveKeyFrameTrajectoryTUMRequest(const SaveKeyFrameTrajectoryTUMRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
}

void SaveKeyFrameTrajectoryTUMRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SaveKeyFrameTrajectoryTUMRequest::~SaveKeyFrameTrajectoryTUMRequest() {
  // @@protoc_insertion_point(destructor:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  SharedDtor();
}

void SaveKeyFrameTrajectoryTUMRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SaveKeyFrameTrajectoryTUMRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveKeyFrameTrajectoryTUMRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveKeyFrameTrajectoryTUMRequest_descriptor_;
}

const SaveKeyFrameTrajectoryTUMRequest& SaveKeyFrameTrajectoryTUMRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mono_5fkitti_2eproto();
  return *default_instance_;
}

SaveKeyFrameTrajectoryTUMRequest* SaveKeyFrameTrajectoryTUMRequest::default_instance_ = NULL;

SaveKeyFrameTrajectoryTUMRequest* SaveKeyFrameTrajectoryTUMRequest::New(::google::protobuf::Arena* arena) const {
  SaveKeyFrameTrajectoryTUMRequest* n = new SaveKeyFrameTrajectoryTUMRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SaveKeyFrameTrajectoryTUMRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SaveKeyFrameTrajectoryTUMRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  return false;
#undef DO_
}

void SaveKeyFrameTrajectoryTUMRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  // optional string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // @@protoc_insertion_point(serialize_end:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
}

::google::protobuf::uint8* SaveKeyFrameTrajectoryTUMRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  // optional string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  return target;
}

int SaveKeyFrameTrajectoryTUMRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  int total_size = 0;

  // optional string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveKeyFrameTrajectoryTUMRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SaveKeyFrameTrajectoryTUMRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SaveKeyFrameTrajectoryTUMRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
    MergeFrom(*source);
  }
}

void SaveKeyFrameTrajectoryTUMRequest::MergeFrom(const SaveKeyFrameTrajectoryTUMRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void SaveKeyFrameTrajectoryTUMRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveKeyFrameTrajectoryTUMRequest::CopyFrom(const SaveKeyFrameTrajectoryTUMRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mono_kitti.SaveKeyFrameTrajectoryTUMRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveKeyFrameTrajectoryTUMRequest::IsInitialized() const {

  return true;
}

void SaveKeyFrameTrajectoryTUMRequest::Swap(SaveKeyFrameTrajectoryTUMRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SaveKeyFrameTrajectoryTUMRequest::InternalSwap(SaveKeyFrameTrajectoryTUMRequest* other) {
  filename_.Swap(&other->filename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SaveKeyFrameTrajectoryTUMRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveKeyFrameTrajectoryTUMRequest_descriptor_;
  metadata.reflection = SaveKeyFrameTrajectoryTUMRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SaveKeyFrameTrajectoryTUMRequest

// optional string filename = 1;
void SaveKeyFrameTrajectoryTUMRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SaveKeyFrameTrajectoryTUMRequest::filename() const {
  // @@protoc_insertion_point(field_get:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SaveKeyFrameTrajectoryTUMRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
}
 void SaveKeyFrameTrajectoryTUMRequest::set_filename(const char* value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
}
 void SaveKeyFrameTrajectoryTUMRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
}
 ::std::string* SaveKeyFrameTrajectoryTUMRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SaveKeyFrameTrajectoryTUMRequest::release_filename() {
  // @@protoc_insertion_point(field_release:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SaveKeyFrameTrajectoryTUMRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:mono_kitti.SaveKeyFrameTrajectoryTUMRequest.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SaveKeyFrameTrajectoryTUMReturn::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SaveKeyFrameTrajectoryTUMReturn::SaveKeyFrameTrajectoryTUMReturn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
}

void SaveKeyFrameTrajectoryTUMReturn::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SaveKeyFrameTrajectoryTUMReturn::SaveKeyFrameTrajectoryTUMReturn(const SaveKeyFrameTrajectoryTUMReturn& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
}

void SaveKeyFrameTrajectoryTUMReturn::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  success_ = false;
}

SaveKeyFrameTrajectoryTUMReturn::~SaveKeyFrameTrajectoryTUMReturn() {
  // @@protoc_insertion_point(destructor:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  SharedDtor();
}

void SaveKeyFrameTrajectoryTUMReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveKeyFrameTrajectoryTUMReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveKeyFrameTrajectoryTUMReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveKeyFrameTrajectoryTUMReturn_descriptor_;
}

const SaveKeyFrameTrajectoryTUMReturn& SaveKeyFrameTrajectoryTUMReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mono_5fkitti_2eproto();
  return *default_instance_;
}

SaveKeyFrameTrajectoryTUMReturn* SaveKeyFrameTrajectoryTUMReturn::default_instance_ = NULL;

SaveKeyFrameTrajectoryTUMReturn* SaveKeyFrameTrajectoryTUMReturn::New(::google::protobuf::Arena* arena) const {
  SaveKeyFrameTrajectoryTUMReturn* n = new SaveKeyFrameTrajectoryTUMReturn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SaveKeyFrameTrajectoryTUMReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  success_ = false;
}

bool SaveKeyFrameTrajectoryTUMReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  return false;
#undef DO_
}

void SaveKeyFrameTrajectoryTUMReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
}

::google::protobuf::uint8* SaveKeyFrameTrajectoryTUMReturn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  return target;
}

int SaveKeyFrameTrajectoryTUMReturn::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveKeyFrameTrajectoryTUMReturn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SaveKeyFrameTrajectoryTUMReturn* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SaveKeyFrameTrajectoryTUMReturn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
    MergeFrom(*source);
  }
}

void SaveKeyFrameTrajectoryTUMReturn::MergeFrom(const SaveKeyFrameTrajectoryTUMReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SaveKeyFrameTrajectoryTUMReturn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveKeyFrameTrajectoryTUMReturn::CopyFrom(const SaveKeyFrameTrajectoryTUMReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mono_kitti.SaveKeyFrameTrajectoryTUMReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveKeyFrameTrajectoryTUMReturn::IsInitialized() const {

  return true;
}

void SaveKeyFrameTrajectoryTUMReturn::Swap(SaveKeyFrameTrajectoryTUMReturn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SaveKeyFrameTrajectoryTUMReturn::InternalSwap(SaveKeyFrameTrajectoryTUMReturn* other) {
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SaveKeyFrameTrajectoryTUMReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveKeyFrameTrajectoryTUMReturn_descriptor_;
  metadata.reflection = SaveKeyFrameTrajectoryTUMReturn_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SaveKeyFrameTrajectoryTUMReturn

// optional bool success = 1;
void SaveKeyFrameTrajectoryTUMReturn::clear_success() {
  success_ = false;
}
 bool SaveKeyFrameTrajectoryTUMReturn::success() const {
  // @@protoc_insertion_point(field_get:mono_kitti.SaveKeyFrameTrajectoryTUMReturn.success)
  return success_;
}
 void SaveKeyFrameTrajectoryTUMReturn::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:mono_kitti.SaveKeyFrameTrajectoryTUMReturn.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mono_kitti

// @@protoc_insertion_point(global_scope)
